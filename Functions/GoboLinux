#!/bin/bash (source)

Import File
Import String
Import OptionParser

function Get_Architecture() {
   [ "$1" = "" ] && arch=`uname -m` || arch="$1"

   case "$arch" in
	   arm*) arch=arm ;;
	   "Power Macintosh") arch=ppc ;;
   esac

	kernelType="`uname -s`"

	case "$kernelType" in
		[lL]inux) kernelType="";;
		CYGWIN*) kernelType=".Cygwin" ;;
		*) kernelType=".$kernelType" ;;
	esac

   echo "$arch$kernelType"
}

function Get_Version() {
   Parameters "$@" package version
   ! Exists "$goboPrograms/$package/$version" && return 1
   realversion="$(basename "$(readlink -f "$goboPrograms/$package/$version")")"
   if Is_Directory "$goboPrograms/$package/$realversion"
   then
      echo "$realversion"
      return 0
   fi
   return 1
}

function Parse_Version() {
    Parameters "$@" url
    if Starts_With "http" "$url"
    then
        echo `echo "$url" | sed s/'.*--\(.*\)--.*'/'\1'/`
        return 0
    else
        echo `Get_Token "$url" "/" "-1"`
        return 0
    fi
}

function Gen_Env_Cache() {
   Log_Verbose "Rebuilding environment cache..."
   cache="$goboEnvironment"/Cache
   echo -e "unset unsetvars\n[ ! \"\$goboSettings\" ] && unsetvars=true\n" > "$cache"
   echo -e "source GoboPath\n" >> "$cache"
   for linkedfile in "$goboEnvironment"/*--*
   do
      [ -f "$linkedfile" ] && cat "$linkedfile" >> "$cache"
      echo >> "$cache"
   done
   unsetvars="$(grep export "$goboExecutables/GoboPath" | awk {'print $1 " " $2'} | grep "^export" | sed -e 's,=.*,,g' -e 's,export,unset,g')"
   echo -e "if [ \"\$unsetvars\" ]\nthen\n${unsetvars:-:}\nfi\n" >> "$cache"
}

# Creates links from one directory into another.
function Link_Directory() {
   Parameters "$@" from to relative overwrite nofollow
   local rfrom here j

   rfrom=`readlink -f "$from"`

   if ! Is_Empty_Directory "$rfrom"
   then
      here=`readlink -f "$to"`
      if [ -z "$here" ]
      then
         # Likely, we are bootstrapping GoboLinux and some path component under
         # e.g., /System/Index/share has not been created yet.
         here=`readlink -m "$to"`
      fi
      [ -d "$here" ] || mkdir -p "$here"
      Quiet pushd "$here"

      if [ -n "$(type -p LinkOrExpandAll)" ]
      then
         LinkOrExpandAll "$rfrom" "$overwrite" "$relative" "$nofollow"
      else
         Log_Error "LinkOrExpandAll not found."
      fi
      Quiet popd
   else
      Quiet rmdir "$rfrom"
   fi
}

function Reverse_Link_Or_Expand() {
   local source destination
   Parameters "$@" source destination
   local rsource bsource dsource file
   rsource=`readlink -f "$source"`
   bsource=`basename "$rsource"`
   dsource=`dirname "$rsource"`

   if [ "$rsource" == "$destination/$bsource" ]
   then			# Already symlinked.  Don't do anything
     return
   fi

   if ! Exists "$destination/$bsource"
   then    # No conflicts in $destination
      if ! Is_Directory $rsource || Is_Empty_Directory $rsource
      then
         mv "$source" "$destination"
         Verbose ln -vs "$destination/$bsource" "$dsource"
      else
         Make_Directory "$destination/$bsource"
         cd "$rsource"
         for file in "$rsource"/*
         do
            Reverse_Link_Or_Expand "$file" "$destination/$bsource"
         done
         cd ..
      fi
   else     # We have a conflict, try to handle it
      if Is_Nonempty_Directory "$rsource" && Is_Directory "$destination/$bsource"
      then
         cd "$rsource"
         for file in "$rsource"/*
         do
            Reverse_Link_Or_Expand "$file" "$destination/$bsource"
         done
         cd ..
      elif Is_Empty_Directory "$rsource"
      then
         Verbose rmdir "$rsource"
         Verbose ln -vs "$destination/$bsource" "$dsource"
      else
         Log_Error "Conflict: $bsource already exists at $destination."
      fi
   fi
}

function Pre_Installation_Preparation() {
   local appname="$(GuessProgramCase $1)"
   local appver="$2"
   local linkedfiles=()
   local progprefix="${goboPrograms}/${appname}/${appver}"
   
   if [ -e "$progprefix" ] && [ $(ls "${progprefix}/" | wc -l) -gt 0 ]
   then
      Progress_Start "Making a safe copy of installed version"
      programfiles=($(ListProgramFiles --no-resources "$progprefix"))
      local safeprefix="${goboPrograms}/${appname}/${appver}-safelinking"
      mkdir -p "$safeprefix"
      cp -a "$progprefix"/* "$safeprefix"
      for f in ${programfiles[@]}
      do
         systempath="$(Programs_To_System_Path "${f}")"
         [ ! -L "${systempath}" ] && continue
         [ "$(dirname "$(readlink -f "${systempath}")")" != "$(dirname "$progprefix/${f}")" ] && continue
         [ -n "${systempath}" ] && {
            Progress_Move
            Log_Verbose "$progprefix/$f"
            ln -sf "$(System_To_Programs_Path "${systempath}" "$safeprefix")" "$(dirname ${systempath})"
         }
      done
      Progress_End
      rm -rf "$progprefix"/*
      ldconfig
   fi
}

function Post_Installation_Clean_Up() {
   appname="$1"
   appver="$2"
   failedinstallation="$3"
   if [ ! -n "$appname" -o ! -n "$appver" ]
   then
      return
   fi
   if [ "${failedinstallation}" = "failed" ]
   then
      [ -d "${goboPrograms}/${appname}/${appver}-failed" ] && rm -rf "${goboPrograms}/${appname}/${appver}-failed"
      if [ -e "${goboPrograms}/${appname}/${appver}" -a "$(readlink -f ${goboPrograms}/${appname}/Current)" != "${goboPrograms}/${appname}/${appver}" ]
      then
         mv "${goboPrograms}/${appname}/${appver}" "${goboPrograms}/${appname}/${appver}-failed"
         Log_Terse "Installation was moved to ${goboPrograms}/${appname}/${appver}-failed"
      fi
      
      if [ -e "${goboPrograms}/${appname}/${appver}-safelinking" ]
      then
         Progress_Start "Restoring safe copy"
         programfiles=$(ListProgramFiles --no-resources "${goboPrograms}/${appname}/${appver}-safelinking")
         mkdir -p "${goboPrograms}/${appname}/${appver}"
         cp -a "${goboPrograms}/${appname}/${appver}-safelinking"/* "${goboPrograms}/${appname}/${appver}"
         for f in ${programfiles[@]}
         do
            f="${goboPrograms}/${appname}/${appver}/${f}"
            systempath="$(Programs_To_System_Path "${f}")"
	    [ ! -L "${systempath}" ] && continue
            [ "$(dirname "$(readlink -f "${systempath}")")" != "$(dirname "${f}")" ] && continue
   
            [ -n "${systempath}" ] && {
               Progress_Move
               ln -sf "$(System_To_Programs_Path "${systempath}" "${goboPrograms}/${appname}/${appver}")" "$(dirname ${systempath})"
            }
         done
         Progress_End
      fi
   fi
   rm -rf "${goboPrograms}/${appname}/${appver}-safelinking"
   ldconfig
}

function Dependencies_File() {
   Parameters "$@" package version

   function attempt_file() {
      if Is_File "$1"
      then
         Quiet mkdir -p "$correctdir" && \
         Quiet mv "$1" "$correctfile" && \
         echo "$correctfile" && \
         return 0
         echo "$1"
         return 0
      fi
      return 1
   }
   local correctdir="$goboPrograms/$package/$version/Resources"
   local correctfile="$correctdir/Dependencies"
   attempt_file "$correctfile" && return 0
   # XXX backwards compatibility
   attempt_file "$goboPrograms/$package/$version/.dependencies" && return 0
   Log_Verbose "Dependency file not found. Searching for old version."
   attempt_file "$goboPrograms/$package/.dependencies" && return 0
   return 1
}

# Whenever you need to strip ${goboPrograms} off from a path,
# use this function. It's the bullet-proof way to do so.
function Strip_Gobo_Programs() {
   sed "s@^${goboPrograms}@@;s@^$(readlink -f "${goboPrograms}")@@;s@^/Programs\(/[^/]*/[^/]*/[^/]*/[^/]*\)@\1@;s@^/*@@"
}

function Traverse_Program_Tree() {
   dirop="$1"
   linkop="$2"
   prefix="$3"
   
   $dirop "${prefix}/../Settings"
   $dirop "$prefix/Resources"
   $dirop "$prefix/Resources/Defaults/Settings"
   $dirop "$prefix/Resources/Tasks"
   $dirop "$prefix/share/man/man1"
   $dirop "$prefix/share/man/man2"
   $dirop "$prefix/share/man/man3"
   $dirop "$prefix/share/man/man4"
   $dirop "$prefix/share/man/man5"
   $dirop "$prefix/share/man/man6"
   $dirop "$prefix/share/man/man7"
   $dirop "$prefix/share/man/man8"
   $dirop "$prefix/share/man/man9"
   $dirop "$prefix/share/man"
   $dirop "$prefix/share"
   $dirop "$prefix/sbin"
   $dirop "$prefix/bin"
   $dirop "$prefix/lib"
   $dirop "$prefix/include"
   $dirop "$prefix/info"
   $dirop "$prefix/doc"
   $dirop "$prefix/libexec"

   if Dir_Set Install
   then
      $linkop `Get_Dir installSettings "$programname" "$versionnumber"`
      $linkop `Get_Dir installVariable "$programname" "$versionnumber"`
   fi

   if Dir_Set Manuals && Boolean "tree"
   then
      ln -nfs "$prefix/share/man" "$prefix/man"
   fi
}

function Create_Program_Tree() {
   prefix="$1"
   [ -n "$2" ] && action="$2" || action="ask"

   ask=yes
   unset keepdir
   Boolean "remove" && unset ask
   Boolean "keep" && { unset ask; keepdir=yes; }
   Boolean "batch" && unset ask

   if [ "$ask" -a "$action" = "ask" ] && Is_Real_Nonempty_Directory "$prefix"
   then
      while true
      do
         Ask_Option "$prefix already exists. [r]emove, [k]eep, [C]ancel?" || exit 1
         case "$REPLY" in
         [Rr]) break ;;
         [Kk]) action=keep; break ;;
         [Cc]) return 1 ;;
         esac # esac is ridiculous.
      done
   fi

   if [ "$action" != "keep" ]
   then
      if [ -e "$prefix" ]
      then 
         rm -rf -- "$prefix"/*
         rmdir "$prefix" 2> /dev/null
      fi
      if Dir_Set Install
      then
         Make_Directory `Get_Dir install "$programname"`
         ( cd "$baseprogramdir" ; ln -s "$installdir" "$versionnumber")
      fi
   fi

   Traverse_Program_Tree "mkdir -p" "$sudo_exec ln -s" "$prefix"
}

function Clean_Program_Tree() {
   prefix=$1
   Traverse_Program_Tree "Quiet rmdir -p" "remove_symlink" "$prefix"
}

function echo_replacing_prefix() {
   str="$1"
   oldprefix="$2"
   newprefix="$3"
   echo "$newprefix""${str:${#oldprefix}}"
}

function Programs_To_System_Path() {
   path="$1"
   if Starts_With "Resources/Wrappers" "$path"
   then
   	 echo_replacing_prefix "$path" "Resources/Wrappers" "$goboExecutables/"
   elif Starts_With "Resources/Tasks/" "$path"
   then
   	 echo_replacing_prefix "$path" "Resources/Tasks" "$goboTasks/"
   elif Starts_With "Resources/Environment/" "$path"
   then
   	 echo_replacing_prefix "$path" "Resources/Environment" "$goboEnvironment/"
   else
      echo "$goboIndex/$path"
   fi
   return 0
}

System_To_Programs_Path() {
   path="$1"
   programprefix="$2"
   if Starts_With "$goboIndex" "$path"
   then
      echo_replacing_prefix "$path" "$goboIndex" "$programprefix/"
   elif Starts_With "$goboTasks" "$path"
   then
      echo_replacing_prefix "$path" "$goboTasks" "$programprefix/Resources/Tasks"
   elif Starts_With "$goboEnvironment" "$path"
   then
      echo_replacing_prefix "$path" "$goboEnvironment" "$programprefix/Resources/Environment"
   fi
   return 0
}

function Get_System_Paths () {
   Parameters "$1" programpath
   while read path
   do
      Programs_To_System_Path "${path}"
   done < <(cd "${programpath}"; find * 2> /dev/null)
}

# Inspect to which package a linked file points to
function Which_Package() {
   which "$1" | Strip_Gobo_Programs | cut -d/ -f1
}

# Inspect the version of the package a linked file points to
function Which_Version() {
   readlink -f "$1" | Strip_Gobo_Programs | cut -d/ -f2
}

progname=`Which_Package "$0"`
conflocations=(
   "${goboUserSettings}/$progname"
   "${goboUserSettings}/Scripts"
   "${goboUserSettings}"
   "${goboSettings}/$progname"
   "${goboSettings}/Scripts"
   "${goboSettings}"
   "${scriptPath}"
   "/System/Settings/Scripts"
   "/System/Settings/$progname"
)

function Find_Conf() {
   for conf in "${conflocations[@]}"
   do
      if Exists "$conf/$1"
      then
         echo "$conf/$1"
         return 0
      fi
   done
   return 1
}

function Color_Output() {
   if Quiet which mtail
   then mtail --silent --config="`Find_Conf $1.mtailrc`"
   else cat
   fi
}

# Parse the script's configuration
function Parse_Conf() {
   scriptname=$(Downcase $(basename $0))
   local mandatory=''
   if [ "$1" = "--mandatory" ]
   then
      mandatory=yes
      shift
   fi
   for conf in "${conflocations[@]}"
   do
      if Exists "$conf/$1"
      then
         source "$conf/$1" || return 2
         for option in "${optionsLongList[@]}"
         do
            opt=$(echo "$option" | sed 's/-/_/')
            value="$(eval echo \$${scriptname}Option_${opt})"
            if [ -n "${value}" ]
            then
               Set_Option "$option" "${value}" || Die "Bad configuration ${scriptname}Option_${opt}=$value in $conf/$1"
            fi
         done
      return 0
      fi
   done
   if [ "$mandatory" = "yes" ]
   then
      Die "Could not find required configuration file $1."
   fi
   return 1
}
