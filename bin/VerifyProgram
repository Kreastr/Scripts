#!/bin/bash

source ScriptFunctions
Import OptionParser
Import GoboLinux
Import File
Import String

######## Error codes ########
# 0     No Error
# 1     FileHash check failed
# 2     No GnuPG or setup error
# 3     Signature check failed
# 4     No signature
# 5     No FileHash (implies no signature)
# 6     Signer unknown
# 7     Unsuported file hash format

scriptDescription="Verify the hashes file gpg signature and check the hashes of a Gobolinux package."
scriptCredits="Copyright (C) 2003 Carlo Calica. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="{ [<options>] <<package> [<version>] | <tarball>> }"
scriptNotes="If no version is specified, Current is assumed.  
The default keyrings are: 
    $HOME/.gnupg/pubring.gpg
    ${GPG_gobo_keyring}"

########## Options ##########
Add_Option_Entry "r" "keyring" "GPG option to an additional the keyring location."
Add_Option_Boolean "S" "no-signature" "Just verify FileHash.  Do not check GPG signature."
Add_Option_Boolean "q" "quiet" "No output.  Check exit status for result."
Add_Option_Boolean "W" "no-web" "Do not check remote keyserver for keys."
Parse_Options "$@"

##### Run as original user
Release_Superuser

### Utility functions ################################################################
function exit_with_error() {
   if [ "$basedir" = "$goboTemp" ]
   then
      rm -rf -- "$goboTemp/$package"
      Log_Normal "Removed package from $goboTemp"
   fi
   exit $1
}

### Parse options #######################################################################
if [ -f "$(Arg 1)" ]
then
   Log_Normal "Uncompressing package..."
   tar -C "$goboTemp" -jxf "$(Arg 1)"
   package=$(echo "$(basename "$(Arg 1)")" | sed 's,\(.*\)--\(.*\)--.*,\1,g')
   versionandrevision=`echo "$(basename "$(Arg 1)")" | sed 's,\(.*\)--\(.*\)--.*,\2,g'`
   version=`String_Version "$versionandrevision"`
   basedir=$goboTemp
else
   package=`GuessProgramCase "$(Arg 1)" "$(Arg 2)"`
   if [ "$(Arg 2)" ]
   then version=`Get_Version "$package" "$(Arg 2)"`
   else version=`Get_Version "$package" "Current"`
   fi
   basedir=$goboPrograms
fi

quiet=""
Boolean "verbose" || quiet="Quiet"
Boolean "quiet" && quiet="Quiet"
prefix="$basedir/$package/$version"

Is_Directory "$basedir/$package" || Die "Package $package does not exist."
Is_Empty "$version" && Die "Couldn't find a proper version for $package."
Is_Directory "$prefix" || Die "$package version $version is not a valid package."

FileHash_loc="${prefix}/Resources/FileHash"
FileHash_sig="${FileHash_loc}.sig"

if Exists "$HOME/.gnupg/pubring.gpg"
then
   UserKeyring="$HOME/.gnupg/pubring.gpg"
fi

if Is_Entry_Set "keyring"
then
   ExtraKeyring=`Entry "keyring"`
fi

[ -s ~/.gnupg/gobopackagetrustedkeys.gpg ] && TrustedKeyring="~/.gnupg/gobopackagetrustedkeys.gpg"
########## Operations ##########

# Checking correct name and version
if [ -f "${prefix}/Resources/MetaData" ]
then
   [ "$(grep 'Name:' "${prefix}"/Resources/MetaData 2>/dev/null | cut -f2 -d' ')" != "$package" ] && Die "Package spoofing detected. Package name ($package) does not match the name in MetaData ($(grep 'Name:' ${prefix}/Resources/MetaData 2>/dev/null | cut -f2 -d' '))"
   [ "$(grep 'Version:' "${prefix}"/Resources/MetaData 2>/dev/null | cut -f2 -d' ')" != "$version" ] && Die "Package spoofing detected. Package version ($version) does not match the version in MetaData ($(grep 'Version:' ${prefix}/Resources/MetaData 2>/dev/null | cut -f2 -d' '))"
else
   Log_Terse "No MetaData file exists in ${prefix}/Resources. Cannot validate package name and version."
fi

result=0
gpgv=`(which gpgv2 || which gpgv) 2> /dev/null`
if Is_Executable "$gpgv"
then
   if Exists "${FileHash_sig}" && ! Boolean "no-signature"
   then
      Boolean "quiet" || Log_Normal "Verifying signature..."
      $quiet Check_FileSig "${FileHash_loc}" "${FileHash_sig}"
      rtn=$?
      if [ $rtn -eq 1 ]
      then
         Boolean "quiet" || Log_Error "Signature check failed: Faulty signature"
         exit_with_error 3
      elif [ $rtn -eq 2 ]
      then
         Boolean "no-web" || {
            tempkeyfile="$(Temporary_File)"
            gpg=$(which gpg2 2> /dev/null || which gpg 2> /dev/null)
            $quiet $gpg --no-default-keyring --keyring "${tempkeyfile}" --recv-keys "$($gpgv "${FileHash_sig}" 2>&1 | awk '{ print $15 }')"
            if [ $? -eq 0 -a -s "${tempkeyfile}" ]
            then
               Log_Normal "Program was signed with a signature not yet in the trust database"
               Log_Terse "Do you want to trust this signature?\n$($gpg ${tempkeyfile})"
               while true
               do
                  Ask_Option "[A]lways/[O]nce/[N]ot now."
                  [ "$REPLY" = "N" -o "$REPLY" = "n" ] && { rm "${tempkeyfile}"; exit_with_error 3; }
       	          [ "$REPLY" = "O" -o "$REPLY" = "o" ] && { rm "${tempkeyfile}"; exit 0; }
                  [ "$REPLY" = "A" -o "$REPLY" = "a" ] && {
                     Log_Verbose "Importing key into ~/.gnupg/gobopackagetrustedkeys.gpg"
                     touch ~/.gnupg/gobopackagetrustedkeys.gpg
                     $quiet $gpg --no-default-keyring --keyring ~/.gnupg/gobopackagetrustedkeys.gpg --import "${tempkeyfile}"
                     rm "${tempkeyfile}"
                     exit 0
                  }
       	       done
            else
               rm "${tempkeyfile}"
               Boolean "quiet" || Log_Error "Signature check failed: Signer unknown"
               exit_with_error 6
            fi
         }
      fi
      Boolean "quiet" || Log_Normal "Signature OK"
   elif ! Boolean "no-signature"
   then  
      Boolean "quiet" || Log_Error "No signature to verify."
      result=4
   fi
else
   Log_Error "GnuPG not installed."
   result=2
fi

if Exists "${FileHash_loc}"
then
   Boolean "quiet" || Log_Normal "Verifying FileHash..."
   output=$(Check_FileHash "${prefix}" "${FileHash_loc}")
   rtn=$?
   if [ "$rtn" == 255 ]
   then 
      Boolean "quiet" || Log_Error "$output"
      exit_with_error 7
   elif [ "$rtn" != 0 ]
   then
      Boolean "quiet" || Log_Error "FileHash check failed: $output"
      exit_with_error 3
   fi
   Boolean "quiet" || Log_Normal "FileHash OK"
else
   Boolean "quiet" || Log_Error "No FileHash to verify."
   result=5
fi
exit_with_error $result
