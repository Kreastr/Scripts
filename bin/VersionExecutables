#!/bin/bash
# Copyright (C) 2008 Michael Homer <=mwh>
# Creates versioned hardlinks for all executables within a program.
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


source ScriptFunctions
Import File
Import GoboLinux
Import OptionParser
Import String
Import Requirements
Import Versions

helpOnNoArguments=yes
scriptDescription="Create versioned hardlinks for each executable in the given program"
scriptCredits="Copyright (C) 2008 Michael Homer. Released under the GNU GPL version 2 or later."
scriptUsage="[<options>] <program_name> [<program_version>]"
scriptExample="ZSH 4.3.6"

Add_Option_Boolean "a" "all-versions" "Create links for all versions of a program, not just Current (when no version specified)."

Parse_Options "$@"

Is_Writable "${goboExecutables}" || Die "Needs write access to ${goboExecutables}"

package=`GuessProgramCase "$(Arg 1)" "$(Arg 2)"`
packageDir="$goboPrograms/$package"
current="$packageDir/Current"
version="$(basename "$(readlink -f "${current}")" /)"

# Create all the versioned links for a given path, and save the list
# of created links into Resources/VersionedExecutables.
linkex() {
   ex=$1
   for ver in "${versions[@]}"
   do
      # Files that already exist, either from an earlier run or because
      # the program ships with them by default should be skipped.
      if ! [ -e "$ex-$ver" ]
      then
         if ln $ex $ex-$ver
         then
            echo $(basename $(dirname $ex))/$(basename $ex-$ver) >> $versionDir/Resources/VersionedExecutables
            count=$((1+$count))
         fi
      fi
   done
}

createprogramlinks() {
   unset cumulative versions
   package=$1
   version=$2
   versionDir="$goboPrograms/$package/$version"
   Log_Normal "Processing $package $version..."
   # Split $version on dots
   components=(
      $(echo $version|sed 's/\./\n/g')
   )
   # Now build up a list of partial versions: e.g., 4, 4.3, 4.3.6
   for comp in "${components[@]}"
   do
      cumulative="${cumulative:+${cumulative}.}${comp}"
      versions=(${versions:+"${versions[@]}"} "${cumulative}")
   done

   # Loop over all the executables in this version, and link them.
   count=0
   for bindir in "$versionDir/bin" "$versionDir/sbin"
   do
      if [ -e "$bindir" ] && [ "`ls $bindir`" ]
      then
         for ex in "$bindir"/*
         do
            if ! echo $ex | grep -qe '-[0-9]\+\(\.[0-9]\+\)*$'
            then
               linkex $ex
            fi
         done
      fi
   done
   Log_Normal "Created $count link(s)."
}

if Boolean "all-versions"
then
   Log_Normal "Processing all versions for $package..."
   All_Versions $package | while read ver
   do
      createprogramlinks $package $ver
   done
   exit
elif [ "$(Arg 2)" ]
then
   version="$(Arg 2)"
fi

createprogramlinks $package $version
