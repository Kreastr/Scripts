#!/usr/bin/env python3

#
# Generates new versions of the KDE recipes
# Copyright (C) 2012 Lucas C. Villa Real <lucasvr@gobolinux.org>
# Released under the GNU GPL version 3
# 

import os
import glob
import urllib.request, urllib.parse, urllib.error


class NameDictionary :
	def __init__(self) :
		self.names = {
			"analitza": 					"Analitza",
			"ark": 							"Ark",
			"blinken": 						"Blinken",
			"cantor": 						"Cantor",
			"filelight": 					"FileLight",
			"gwenview": 					"GWenview",
			"jovie": 						"Jovie",
			"kaccessible": 					"KAccessible",
			"kactivities": 					"KActivities",
			"kalgebra": 					"KAlgebra",
			"kalzium": 						"Kalzium",
			"kamera": 						"Kamera",
			"kanagram": 					"KAnagram",
			"kate": 						"Kate",
			"kbruch": 						"KBruch",
			"kcalc": 						"KCalc",
			"kcharselect": 					"KCharSelect",
			"kcolorchooser": 				"KColorChooser",
			"kdeadmin": 					"KDE-Admin",
			"kdeartwork": 					"KDE-Artwork",
			"kde-baseapps": 				"KDE-Base-Apps",
			"kde-base-artwork": 			"KDE-Base-Artwork",
			"kdegames": 					"KDE-Games",
			"kdegraphics-mobipocket": 		"KDE-Graphics-MobiPocket",
			"kdegraphics-strigi-analyzer": 	"KDE-Graphics-Strigi-Analyzer",
			"kdegraphics-thumbnailers": 	"KDE-Graphics-Thumbnailers",
			"kdelibs": 						"KDE-Libs",
			"kdemultimedia": 				"KDE-Multimedia",
			"kdenetwork": 					"KDE-Network",
			"kdepim": 						"KDE-PIM",
			"kdepimlibs": 					"KDE-PIM-Libs",
			"kdepim-runtime": 				"KDE-PIM-Runtime",
			"kdeplasma-addons": 			"KDE-Plasma-Addons",
			"kde-runtime": 					"KDE-Runtime",
			"kdesdk": 						"KDE-SDK",
			"kdetoys": 						"KDE-Toys",
			"kde-wallpapers": 				"KDE-Wallpapers",
			"kdewebdev": 					"KDE-Webdev",
			"kde-workspace": 				"KDE-Workspace",
			"kdf": 							"KDF",
			"kfloppy": 						"KFloppy",
			"kgamma": 						"KGamma",
			"kgeography": 					"KGeography",
			"kgpg": 						"KGPG",
			"khangman": 					"KHangman",
			"kig": 							"KIG",
			"kimono": 						"Kimono",
			"kiten": 						"Kiten",
			"klettres": 					"KLettres",
			"kmag": 						"KMag",
			"kmousetool": 					"KMouseTool",
			"kmouth": 						"KMouth",
			"kmplot": 						"KMPlot",
			"kolourpaint": 					"KolourPaint",
			"konsole": 						"Konsole",
			"korundum": 					"Korundum",
			"kremotecontrol": 				"KRemoteControl",
			"kross-interpreters": 			"Kross-Interpreters",
			"kruler": 						"KRuler",
			"ksaneplugin": 					"KSanePlugin",
			"ksecrets": 					"KSecrets",
			"ksnapshot": 					"KSnapshot",
			"kstars": 						"KStars",
			"ktimer": 						"KTimer",
			"ktouch": 						"KTouch",
			"kturtle": 						"KTurtle",
			"kwallet": 						"KWallet",
			"kwordquiz": 					"KWordQuiz",
			"libkdcraw": 					"LibKDcraw",
			"libkdeedu": 					"LibKDEEdu",
			"libkexiv2": 					"LibKexiv2",
			"libkipi": 						"LibKipi",
			"libksane": 					"LibKSane",
			"marble": 						"Marble",
			"okular": 						"Okular",
			"oxygen-icons": 				"Oxygen-Icons",
			"parley": 						"Parley",
			"perlkde": 						"Perl-KDE",
			"perlqt": 						"Perl-Qt",
			"printer-applet": 				"Printer-Applet",
			"pykde4": 						"PyKDE4",
			"qtruby": 						"QtRuby",
			"qyoto": 						"Qyoto",
			"rocs": 						"Rocs",
			"smokegen": 					"Smokegen",
			"smokekde": 					"SmokeKDE",
			"smokeqt": 						"SmokeQt",
			"step": 						"Step",
			"superkaramba": 				"SuperKaramba",
			"svgpart": 						"SvgPart",
			"sweeper": 						"Sweeper"
		}

	def guessName(self, name) :
		if name in self.names :
			return self.names[name]
		name = name.replace("kde", "KDE")
		if len(name) > 3 and name[0:3] == "KDE" and name[3] != '-' :
			newName = "KDE-" + name[3].upper() + name[4:]
		else:
			newName = name
		nameFull = ""
		nameParts = newName.split("-")
		for part in nameParts :
			nameFull += part[0].upper() + part[1:] + "-"
		return nameFull[:-1]


class KDERepository :
	def __init__(self, version) :
		self.baseuri = "ftp://ftp.kde.org/pub/kde/stable/" + version + "/src"
		self.extensions = [ '.tar.xz', '.tar.bz2', '.tar.gz' ]
		self.files = []
		self.filteredFiles = {}
	
	def _getTarball(self, filename) :
		for extension in self.extensions :
			if filename.find(extension) > 0 :
				return filename
		return None
	
	def _getName(self, filename) :
		for extension in self.extensions :
			n = filename.find(extension)
			if n > 0 :
				return filename[0:filename[:n].rfind('-')]
		return None
	
	def _getNameAndVersion(self, filename) :
		for extension in self.extensions :
			n = filename.find(extension)
			if n > 0 :
				return filename[:n]
		return None

	def _getVersion(self, filename) :
		for extension in self.extensions :
			end = filename.find(extension)
			if end > 0 :
				return filename[filename.rfind('-')+1:end]
		return None

	def _newerThanReference(self, newVersion, referenceVersion) :
		rv = referenceVersion.split(".")
		nv = newVersion.split(".")
		if len(rv) < len(nv) :
			end = len(rv)
		else :
			end = len(nv)
		for i in range(0, end) :
			if int(nv[i]) > int(rv[i]) :
				return True
		return False
	
	def _filterByVersion(self) :
		nameDict = NameDictionary()
		for url in self.files :
			thisName = self._getName(url)
			thisVersion = self._getVersion(url)
			prettyName = nameDict.guessName(thisName)
			if not thisName in self.filteredFiles :
				self.filteredFiles[thisName] = [ prettyName, thisVersion, url ]
			else :
				version = self.filteredFiles[thisName][1]
				if self._newerThanReference(thisVersion, version) :
					thisUrl = self.baseuri + '/' + url
					self.filteredFiles[thisName] = [ prettyName, thisVersion, thisUrl ]

	def _pickBestCompressions(self) :
		for entry in self.filteredFiles :
			url = self.filteredFiles[entry][2]
			nv = self._getNameAndVersion(url)
			for compression in self.extensions :
				if nv + compression in self.files :
					thisUrl = self.baseuri + '/' + nv + compression
					self.filteredFiles[entry][2] = thisUrl
					break

	def _filterFiles(self) :
		self._filterByVersion()
		self._pickBestCompressions()
		return self.filteredFiles

	def parse(self) :
		print("Parsing the URL for KDE at %s" %self.baseuri)
		result = urllib.request.urlopen(self.baseuri)
		for line in result.readlines() :
			href = line.split()[-1].strip('\r\n')
			if len(href) == 0 :
				continue
			tarball = self._getTarball(href)
			if not tarball :
				continue
			self.files.append(tarball)
		return self._filterFiles()


	def update(self) :
		for name in self.filteredFiles :
			recipe = Recipe(self.filteredFiles[name][0], self.filteredFiles[name][1], self.filteredFiles[name][2])
			if recipe.exists() :
				# NewVersion already invoked for this package + version
				continue
			error = recipe.checkout()
			if error :
				# There isn't any recipe for this package
				recipe.create()
			else :
				# There is at least one recipe for this package
				recipe.update()
	
	def dump(self) :
		print("-- %s dump --" %self.baseuri)
		for entry in self.filteredFiles :
			print(entry + " ", end=' ')
			print(self.filteredFiles[entry])
		print("")

	def getRecipeList(self) :
		return self.filteredFiles

	def getBaseUri(self) :
		return self.baseuri


class Recipe :
	def __init__(self, name, version, url) :
		self.name = name
		self.version = version
		self.url = url

	def exists(self) :
		localrecipes = "/Files/Compile/LocalRecipes"
		recipes = glob.glob(localrecipes + "/*")
		for r in recipes :
			rname = r[len(localrecipes)+1:]
			if rname.lower() == self.name.lower() :
				recipedir = r + "/" + self.version
				if os.path.exists(recipedir) :
					print("There's already a recipe for %s at %s" %(rname, recipedir))
					return True
				return False
		return False

	def update(self) :
		cmd = "NewVersion %s %s %s" %(self.name, self.version, self.url)
		return os.system(cmd)

	def create(self) :
		cmd = "MakeRecipe --batch %s %s %s" %(self.name, self.version, self.url)
		return os.system(cmd)

	def checkout(self) :
		cmd = "EditRecipe --no-edit %s" %self.name
		return os.system(cmd)


class MetaRecipe :
	def __init__(self, name, version) :
		self.name = name
		self.version = version
		self.latestTarballs = None
		self.repository = None

	def setRepository(self, repository) :
		self.repository = repository

	def checkout(self) :
		url = self.repository.getBaseUri() + "/kde-baseapps-4.8.1.tar.xz".replace("4.8.1", self.version)
		filteredFiles = self.repository.getRecipeList()
		if "kde-baseapps" in filteredFiles :
			url = filteredFiles["kde-baseapps"][2]
		cmd = "NewVersion %s %s %s" %(self.name, self.version, url)
		return os.system(cmd)

	def update(self, latestTarballs) :
		self.latestTarballs = latestTarballs
		compileDir = "/Files/Compile" if os.path.exists("/Files/Compile") else "/Data/Compile"
		recipe = compileDir + "/LocalRecipes/%s/%s/Resources/Dependencies" %(self.name, self.version)
		if os.path.exists(recipe) :
			self._updateRecipe(recipe)

	def _updateRecipe(self, recipe) :
		print("Updating %s" %recipe)
		f = open(recipe, "w")
		filteredFiles = self.repository.getRecipeList()
		# Write all libs first
		f.write(filteredFiles["kdelibs"][0] + " = " + filteredFiles["kdelibs"][1] + "\n")
		for entry in filteredFiles :
			if "lib" in entry and entry != "kdelibs" :
				f.write(filteredFiles[entry][0] + " = " + filteredFiles[entry][1] + "\n")
		# Write the remaining apps
		for entry in filteredFiles :
			if not "lib" in entry :
				f.write(filteredFiles[entry][0] + " = " + filteredFiles[entry][1] + "\n")
		f.close()


if __name__ == '__main__' :
	if len(os.sys.argv) != 2 :
		print("Syntax:  %s <KDE version>" %os.sys.argv[0])
		print("")
		print("Example: %s 4.8.1" %os.sys.argv[0])
		os.sys.exit(1)

	kdeVersion = os.sys.argv[1]

	# Download the most recent version of all the existing packages
	kde = KDERepository(kdeVersion)
	kde.parse()
	kde.dump()
	kde.update()
	recipeList = kde.getRecipeList()

	m = MetaRecipe("KDE", kdeVersion)
	m.setRepository(kde)
	m.checkout()
	m.update(recipeList)
