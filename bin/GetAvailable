#!/usr/bin/env python3

#
# GetAvailable
#  Get available package and recipe versions.
#
# (C) 2004 Andre Detsch. Released under the GNU GPL.
#

import os, os.path, sys, string, time, threading

from PythonUtils import *

goboTemp = getGoboVariable('goboTemp')
if not goboTemp:
	Log_Error("Unable to get $goboTemp value. Aborting.")
	sys.exit(1)

listdir_cache = {}

def cached_listdir(name):
	name = os.path.realpath(name)
	if name in listdir_cache:
		return listdir_cache[name]
	entries = os.listdir(name)
	listdir_cache[name] = entries
	return entries

cacheDir = os.path.expanduser(goboTemp+'/Scripts-'+os.getenv('USER')+'/cache/')

def loadConfig():
	goboSettings = getGoboVariable('goboSettings')

	tr = {}
	for i in ['timeout']:
		try:
			tr[i] = getGoboVariable(i, 'Scripts/GetAvailable.conf')
		except:
			tr[i] = 0

	for i in ['defaultLocalPackagesPaths']:
		try:
			tr[i] = getGoboVariable(i, 'Scripts/GetAvailable.conf', True)
		except:
			tr[i] = []

	for listType in ['contribPackagesLists', 'officialPackagesLists']:
		try:
			tr[listType] = getGoboVariable(listType, 'Scripts/GetAvailable.conf', True)
			for j in range(len(tr[listType])):
				if '.' in tr[listType][j].split('/')[-1]:
					extension = '.' + tr[listType][j].split('/')[-1].split('.')[-1]
				else:
					extension = ''
				tr[listType][j] = (tr[listType][j], listType+str(j)+extension)

		except:
			tr[listType] = []

	tr['defaultLocalPackagesPaths'] = list(map(os.path.abspath, tr['defaultLocalPackagesPaths']))
	tr['defaultLocalPackagesPaths'] = list(map(os.path.expanduser, tr['defaultLocalPackagesPaths']))

	return tr

globalSettings = loadConfig()

downloadedCount = 0
downloadedLock = threading.Lock()

def downloadFiles(files, force=False, hook=None, message='', verify=True):
	global downloadedCount
	global downloadedLock
	downloadedCount = 0
	def doDownload(url, localfile, timeout=10):
		has_wget = not bash('wget --help &> /dev/null', 'v')
		if has_wget:
			if not verify:
				wget_cmd = 'wget --no-check-certificate'
			else:
				wget_cmd = 'wget'
			cmd = '%s --timeout=%d --tries=1 --quiet %s -O "%s" && touch "%s" || rm -f "%s"'%(wget_cmd, timeout, url, localfile, localfile, localfile)
			bash(cmd, 'v')
		else:
			try:
				urllib.request.urlretrieve(url, localfile)
			except:
				sys.stderr.write('Timeout\n')

		global downloadedCount
		global downloadedLock
		downloadedLock.acquire()
		downloadedCount = downloadedCount + 1
		if hook:
			hook(message, downloadedCount, len(files), False)
		downloadedLock.release()

	threads = []
	if files and not os.access(cacheDir, os.W_OK):
		os.makedirs(cacheDir)

	# Clean up old and empty files
	currentTime = time.time()
	ageLimit = 60*60 # an hour
	for filename in cached_listdir(cacheDir):
		st = os.stat(cacheDir+filename)
		if st.st_size == 0 or currentTime > (ageLimit + st.st_mtime):
			os.unlink(cacheDir+filename)

	try:
		timeout = int(globalSettings['timeout'])
	except:
		sys.stderr.write('Invalid timeout value "%s"\n'%globalSettings['timeout'])
		timeout = 10

	for url, filename in files:
		if force or not os.access(cacheDir+filename, os.R_OK):
			import urllib.request, urllib.parse, urllib.error
			t = threading.Thread(target=doDownload, args=(url, cacheDir+filename, timeout))
			t.setDaemon(True) # program exits on long timeout
			threads.append(t)
		else:
			downloadedCount = downloadedCount + 1

	if threads and hook:
		hook(message, downloadedCount, len(files))

	for thread in threads:
		thread.start()

	begin = time.time()
	try:
		while (time.time() - begin) <= timeout:
			downloadedLock.acquire()
			if downloadedCount >= len(files):
				downloadedLock.release()
				break
			if hook:
				aborted = hook(message, downloadedCount, len(files), False)
				if aborted:
					downloadedLock.release()
					break
			downloadedLock.release()
			time.sleep(1)
		if (time.time() - begin) > timeout:
			sys.stderr.write('<Timeout>')
			if not hook:
				sys.stderr.write('\n')
	except KeyboardInterrupt:
		sys.stderr.write('<Interrupted>')
		if not hook:
			sys.stderr.write('\n')

	# returns false if a timeout has occured
	return downloadedCount >= len(threads)


def UpdateCache(types, force=True, hook=None, verify=True):
	files = []

	if 'official_package' in types:
		for url, fname in globalSettings['officialPackagesLists']:
			files.append((url, fname))

	if 'contrib_package' in types:
		for url, fname in globalSettings['contribPackagesLists']:
			files.append((url, fname))

	if not files:
		return

	ret = downloadFiles(files, force, hook, 'Downloading updated remote lists',
			verify=verify)
	return ret

def addToDict(d, p, v, r, u):
	if p not in d:
		d[p] = {}
	if v not in d[p]:
		d[p][v] = {}
	if r not in d[p][v]:
		d[p][v][r] = []
	d[p][v][r].append(u)

def getUnpackedLocalPackagesOrRecipes(directory, searching_packages=False, d=None, default_revision='', current_only=False, filtering=None):

	if d is None:
		d = KeyInsensitiveDict();

	if not os.path.isdir(directory):
		return d

	programs = None
	if filtering:
		guessed_name = filtering[0].upper()+filtering[1:].lower()
		if os.path.isdir(directory+'/'+guessed_name):
			programs = [ guessed_name ]
	if programs is None:
		programs = cached_listdir(directory)

	for i in range(len(programs)):
		p = programs[i]
		if not os.path.isdir(directory+'/'+p):
			continue
			
		if filtering and filtering.lower() != p.lower():
			continue

		if current_only:
			if not os.path.isdir(directory+'/'+p+'/'+'Current'):
				continue

			try:
				v = os.readlink(directory+'/'+p+'/'+'Current').split('/')[-1]
			except:
				continue

			u = directory+'/'+p+'/'+v
			if os.access(u+'/'+'Resources/Revision', os.R_OK):
				f = open(u+'/'+'Resources/Revision')
				r = f.read().strip()
				f.close()
			else:
				r = default_revision
			addToDict(d, p,v,r,u)
			continue

		try:
			ds = cached_listdir(directory+'/'+p)
		except:
			continue

		versions = [ v for v in ds if v not in ['Current', 'Settings', 'Variable', 'Headers'] ]
		versions = [ v for v in versions if os.path.isdir(directory+'/'+p+'/'+v) ]

		# Verify: what to do with an empty program entry?
		if not versions:
			continue

		for v in versions:
			if not searching_packages:
				v, r = Split_Version_Revision(v)
				u = directory+'/'+p+'/'+v
				if r:
					u += '-'+r
				else:
					r = default_revision
				if not os.access(u+'/'+'Recipe', os.R_OK):
					continue
			else:
				u = directory+'/'+p+'/'+v
				if os.access(u+'/'+'Resources/Revision', os.R_OK):
					f = open(u+'/'+'Resources/Revision')
					r = f.read().strip()
					f.close()
				else:
					r = default_revision
			addToDict(d, p,v,r,u)
	return d

def getPackedLocalPackages(directory, d = None, default_revision=''):
	import os.path
	if directory and directory[-1] != '/':
		directory = directory + '/'

	if d == None:
		d = KeyInsensitiveDict()

	if not os.path.isdir(directory):
		return d

	files = cached_listdir(directory)
	for fname in files:
		l = fname.split('--')
		if len(l) > 2:
			p = l[0]
			v,r = Split_Version_Revision(l[1])
			if not r:
				r=default_revision
			addToDict(d, p,v,r,directory+fname)
	return d

def getVersionsFromPackagesList(fname, url, path_prefix = '', d = None):
	if not os.access(fname, os.R_OK):
		return d

	if os.path.getsize(fname) == 0:
		Log_Terse("Timed out downloading %s"%(url),"GetAvailable")
		os.remove(fname)
		return d

	if path_prefix and path_prefix[-1] != '/':
		path_prefix = path_prefix + '/'

	if d == None:
		d = KeyInsensitiveDict()

	try:
		if fname[-4:] == '.bz2':
			import bz2
			f = bz2.BZ2File(fname)
		elif fname[-3:] == '.gz':
			import gzip
			f = gzip.GzipFile(fname)
		else:
			f = open(fname)

		lines = f.readlines()
		f.close()

		for line in lines:
			line = line.decode("utf-8")
			l = line.split('--')
			if len(l) > 2:
				p = l[0]
				v,r = Split_Version_Revision(l[1])
				addToDict(d, p,v,r, path_prefix+line.strip())
		return d
	except Exception as e:
		Log_Terse("Cannot open %s - %s\nRemoving...."%(fname,str(e)),"GetAvailable")
		os.remove(fname)
		return d


def GetAvailable(types, localdirs=None, forceupdate=False, hook=None,
		availables=None, accessWeb=True, doNotUpdate=False, goboPrograms=None,
		verify=True, filtering=None):
	if 'recipe' in types:
		compileRecipesDir = getCompileOptions()

	if availables == None:
		availables = {}

	if 'installed' in types:
		if goboPrograms:
			path= goboPrograms
		else:
			path = getGoboVariable('goboPrograms')
		if 'installed' not in availables or not availables['installed']:
			availables['installed'] = {}
		if 'programs' not in availables['installed'] or not availables['installed']['programs']:
			availables['installed']['programs'] = KeyInsensitiveDict()
		getUnpackedLocalPackagesOrRecipes(path, True, availables['installed']['programs'], default_revision= 'r1', filtering=filtering)

	if 'current' in types:
		if goboPrograms:
			path= goboPrograms
		else:
			path = getGoboVariable('goboPrograms')
		if 'current' not in availables or not availables['current']:
			availables['current'] = {}
		if 'programs' not in availables['current'] or not availables['current']['programs']:
			availables['current']['programs'] = KeyInsensitiveDict()
		getUnpackedLocalPackagesOrRecipes(path, True, availables['current']['programs'], default_revision= 'r1', current_only=True, filtering=filtering)

	if 'local_package' in types:
		if 'local_package' not in availables or not availables['local_package']:
			availables['local_package'] = {}

		if 'programs' not in availables['local_package'] or not availables['local_package']['programs']:
			availables['local_package']['programs'] = KeyInsensitiveDict()

		if not localdirs:
			localdirs = globalSettings['defaultLocalPackagesPaths']

		import os
		# Placing local_packages in par with local recipes
		default_revision='r'+str(sys.maxsize)
		for directory in localdirs:
			getPackedLocalPackages(os.path.expanduser(directory.strip()), availables['local_package']['programs'], default_revision=default_revision)
			getUnpackedLocalPackagesOrRecipes(os.path.expanduser(directory.strip()), True, availables['local_package']['programs'], default_revision=default_revision, filtering=filtering)

	if accessWeb and (not doNotUpdate or forceupdate):
		UpdateCache(types, forceupdate, hook, verify=verify)

	if hook:
		hook('Loading lists', 0, 4)


	if 'official_package' in types:
		if 'official_package' not in availables or not availables['official_package']:
			availables['official_package'] = {}
		availables['official_package']['programs']= KeyInsensitiveDict()
		for url, fname in globalSettings['officialPackagesLists']:
			availables['official_package']['programs'] = getVersionsFromPackagesList(cacheDir+fname, url, "/".join(url.split('/')[:-1]), availables['official_package']['programs'])

	if hook:
		hook('Loading lists', 1, 4)

	if 'contrib_package' in types:
		if 'contrib_package' not in availables or not availables['contrib_package']:
			availables['contrib_package'] = {}

		availables['contrib_package']['programs']= KeyInsensitiveDict()
		for url, fname in globalSettings['contribPackagesLists']:
			availables['contrib_package']['programs'] = getVersionsFromPackagesList(cacheDir+fname, url, "/".join(url.split('/')[:-1]), availables['contrib_package']['programs'])

	if hook:
		hook('Loading lists', 2, 4)

	if 'recipe' in types:
		if 'recipe' not in availables or not availables['recipe']:
			availables['recipe'] = {}

		if 'programs' not in availables['recipe'] or not availables['recipe']['programs']:
			availables['recipe']['programs'] = KeyInsensitiveDict()

		# searches local recipes first
		default_revision='r'+str(sys.maxsize)
		availables['recipe']['programs'] = getUnpackedLocalPackagesOrRecipes(compileRecipesDir, False, availables['recipe']['programs'], default_revision=default_revision, filtering=filtering)

	if hook:
		hook('Loading lists', 3, 4)
		hook('Loading lists', 4, 4)

	return availables

def updatedTypesList(types, validTypes):
	for i in range(len(types)):
		if len (types[i]) == 1:
			for t in list(validTypes.keys()):
				if types[i][0] == t:
					types[i] = validTypes[t]
					break
	if 'all' in types:
		types = list(validTypes.values())
		types.remove('all')
	return types

#############################################################################
#  'main()'
#############################################################################

if __name__ == '__main__':
	import sys
	import getopt, os

	try:
		opts, args = getopt.getopt(sys.argv[1:], 't:Whp:', [
			'type=', 'types=', 'local-dirs=', 'full-list', 'force-update',
			'no-web', 'gobo-programs=', 'help', 'no-check-certificate', 'filtering='])
	except getopt.GetoptError as detail:
		print(sys.argv[0].split('/')[-1]+': '+str(detail))
		sys.exit(1)

	validTypes = {'i':'installed', 'T':'current', 'l':'local_package', 'o':'official_package', 'r':'recipe', 'c':'contrib_package', 'a':'all'}
	types      = ['local_package', 'official_package']
	typesChanged = False
	localdirs = None
	forceupdate = False
	noWeb = False
	goboPrograms = None
	verify = True
	filtering = None

	for o, a in opts:
		if o in ['--types','--type', '-t']:
			typesChanged = True
			types = updatedTypesList(a.split(','), validTypes)
		if o == '--local-dirs':
			localdirs = a.split(',')
		elif o == '--force-update':
			forceupdate = True
		elif o in ['--gobo-programs', '-p']:
			goboPrograms = a
		elif o in ['--no-web', '-W']:
			noWeb = True
			if not typesChanged:
				types = ['local_package']
		elif o in ['--no-check-certificate']:
			verify=False
		elif o in ['--filtering']:
			filtering = a
		elif o in ['--help', '-h']:
			print("""
GetAvailable
 Get available package and recipe versions.


Options:
 -t [t1,t2,...]
 --types=[t1,t2,...]  Sets what kind of packages can be searched, in the
                      passed order. Valid types are:
                      - local_package, official_package, contrib_package,
                        installed, recipe, current, all
                      Using only the following one-character options is
                      also valid:
                      - l, o, c, i, r, a
                      Default types are:
                      - local_package, official_package
                      Notice that when "recipe" type is used, Compile.conf is
                      read to set local recipes locations.

 --local-dirs=[d1,..]    where to look for local binary packages. By default,
                         uses the paths defined at GetAvailable.conf

 --force-update          downloads required packages list even if there is a
                         local copy (cached in """+cacheDir+""") newer than one hour.

 -W, --no-web            do not try to download anything and don't lists
                         remote packages (if not explicitly listed in '--types=').
                         Overrides '--force-update'

 -p
 --gobo-programs         Override default """+getGoboVariable("goboPrograms")+""" as path of installed packages
 --no-check-certificate  Do not verify certificates when downloading source.


Examples of usage:
 GetAvailable --types=recipe

 """)
			sys.exit(0)


	hook = consoleProgressHook

	availables = GetAvailable(types, localdirs, forceupdate, accessWeb=not noWeb,
			hook=hook, goboPrograms=goboPrograms, verify=verify, filtering=filtering)

	for t in list(availables.keys()):
		for p in caseinsensitive_sort(list(availables[t]['programs'].keys())):
			for v in list(availables[t]['programs'][p].keys()):
				print(t,p,v,availables[t]['programs'][p][v])

	#sys.stderr.write(f"{availables}\n")

