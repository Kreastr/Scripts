#!/bin/bash

source ScriptFunctions
Import File
Import GoboLinux
Import Log
Import OptionParser

### Options ###################################################################

scriptDescription="Move a program from ${goboPrograms} to \$goboInstall or <destdir>."
scriptCredits="Copyright (C) 2004 Carlo Calica. Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<program> [<version>] [<destdir>]"
scriptExample="GCC 2.95.3 /Network/Programs"
scriptNotes="This script 'moves' a program from the ${goboPrograms} hierarchy to "\
"<destdir> directory.  Afterwards, symlinks are created in ${goboPrograms} "\
"to maintain functionality.  If <destdir> is omitted the env var goboInstall "\
"is used."
Add_Option_Boolean "c" "copy" "Copy program.  Keep existing on rootfs."
Add_Option_Boolean "b" "batch" "Batch operation.  Minimize warning output"
Add_Option_Boolean "D" "no-dependencies" "Do not try to fulfill dependencies."
Parse_Options "$@"

### Operation #################################################################

programname=`GuessProgramCase $(Arg 1) $(Arg 2)`
tmpval="$2"
if [ "$tmpval" ]
then
   if Is_Directory "${goboPrograms}/${programname}/$tmpval"
   then
      versionnumber="$tmpval"
      [ "$(Arg 3)" ] && export goboInstall="$(Arg 3)"
   else   # $2 contains destdir
      versionnumber=`Get_Version "$programname" "Current"`
      export goboInstall="$tmpval"
   fi
else
   versionnumber=`Get_Version "$programname" "Current"`
fi

if [ "$goboPrograms" = "$goboInstall" ]
then
   Die "Please specify a destination directory as an argument or goboInstall env variable."
fi

prefix="${goboPrograms}/$programname/$versionnumber"

Is_Directory "$prefix" || Die "$programname version $versionnumber was not found."
error_msg="$programname version $versionnumber is already detached."
Boolean "batch" && error_msg=""
Is_Real_Directory "$prefix" || Pass_Away $error_msg

Is_Directory "$goboInstall" || Die "Unable to detach to ${goboInstall}: not a valid directory"

Is_Writable "${goboInstall}" || Die "Needs write access to ${goboInstall}"

Log_Normal "Detaching ${programname}, version ${versionnumber} to ${goboInstall}."

#What to do.....

# This is a little more complex than a simple mv.  Not sure if it needs to be
# but as it will normally be across filesystems so it isn't that inefficient.
copy_files="false"
Exists "${goboPrograms}/$programname/$versionnumber/Resources/RootFS" && copy_files="true"

Boolean "copy" && copy_files="true"

cd "${goboPrograms}/$programname"
Make_Directory "${goboInstall}/$programname"
cp -fRp "$versionnumber" "${goboInstall}/$programname"
Is_Link "${goboPrograms}/$programname/Settings" && ln -nsf "${goboPrograms}/$programname/Settings" "${goboInstall}/$programname/Settings"
if [ "$copy_files" = "false" ]
then
   mv $versionnumber "${versionnumber}-safe"
   ln -nsf "${goboInstall}/$programname/$versionnumber" "$versionnumber"
   SymlinkProgram "$programname" "$versionnumber"
   RemoveProgram --batch "$programname" "${versionnumber}-safe"
fi

# Detach Dependencies
if ! Boolean "no-dependencies"
then
   Log_Normal "Detaching Dependencies..."
   Dependencies -c -H -p "$goboInstall" -e "DetachProgram -c" "$programname" "$versionnumber"
fi
