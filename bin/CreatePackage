#!/bin/bash

source ScriptFunctions
Import File
Import GoboLinux
Import Log
Import OptionParser

### Options ###################################################################

helpOnNoArguments=yes
scriptDescription="Make a GoboLinux package."
scriptCredits="Copyright (C) 2002-2003 Hisham Muhammad - Released under the GNU GPL."
scriptUsage="<directory>"
Add_Option_Boolean "b" "bzip2" "Compress using bzip2"
Add_Option_Boolean "g" "gzip" "Compress using gzip"
Add_Option_Boolean "p" "personal-backup" "Use personal backup mode.  Do NOT use for public distribution"
Add_Option_Entry   "t" "target-directory" "Create the package archive inside the passed directory (instead of '.')" ""

Parse_Options "$@"

### Operation ############################################################

package=`basename "$(Arg 1)"`
package=`GuessProgramCase $package $(Arg 2)`

targetdir=`Entry "target-directory"`
[ "$targetdir" ] || targetdir="`pwd`"

cd ${goboPrograms}
# TODO make it smarter
if [ "$(Arg 2)" ]
then
   versionnumber="$(Arg 2)"
else
   currentversion=`Get_Version "$package" Current`
   if [ "$currentversion" ]
   then
      versionnumber=$(basename $currentversion)
   else
      Die "Couldn't deduce version for $package. Please create the 'Current' link."
   fi
fi

versionnumber=`String_Version $versionnumber`

Is_Directory "${goboPrograms}/$package/$versionnumber" || Die "Package $package version $versionnumber does not exist."
Is_Link "${goboPrograms}/$package/$versionnumber" && tree_symlinked=yes

if [ -e "${goboPrograms}/$package/$versionnumber/Makefile" ]
then
   Log_Terse "Package contains a Makefile at the root; looks like a Gobo system package."
   Log_Terse "You should pack those running 'make VERSION=x.y.z'"
   Ask_Continue "Proceed with CreatePackage anyway?"
fi

Log_Normal "Creating package for ${package} ${versionnumber}."

archfile="$package/$versionnumber/Resources/Architecture"
if Exists "$archfile"
then architecture=`cat "$archfile"`
else architecture=`Get_Architecture`
fi

revfile="$package/$versionnumber/Resources/Revision"
if Exists "$revfile"
then revstring="-`cat $revfile`"
fi

packagefile="${package}--${versionnumber}${revstring}--${architecture}.tar"
Boolean "personal-backup" && packagefile="$package--$versionnumber-PersonalBackup--$architecture.tar"

[ -e "$package/Settings" ] && anysettings="$package/Settings"

resources="$package/$versionnumber/Resources"
if ! [ -e "$resources/Dependencies" ]
then
   if [ -e "$resources/BuildInformation" ]
   then Die "No $resources/Dependencies file. You can use the information in "\
            "$resources/BuildInformation as a basis when writing it."
   else Die "No $resources/Dependencies file. You can run GenBuildInformation "\
            "and use the returned information as a basis when writing it."
   fi
fi

# XXX Backwards compatibility
Quiet rm -- "$package/.dependencies"
Quiet rm -- "$package/$versionnumber/.dependencies"

# Try to remove unneeded directories
Quiet rmdir $package/$versionnumber/man/man*
Quiet rmdir $package/$versionnumber/{bin,sbin,lib,include,man,info,share,Shared}
Quiet rmdir $package/$versionnumber/Resources/Defaults/Settings
Quiet rmdir $package/$versionnumber/Resources/Defaults
Quiet rmdir $package/$versionnumber/Resources
if [ ! -e "$package/$versionnumber/Shared" ]
then
   Quiet rm -- "$package/$versionnumber/share"
   Quiet rmdir "$package/$versionnumber/share"
fi


[ "$tree_symlinked" = "yes" ] && Quiet pushd `RealPath ${goboPrograms}/$package/$versionnumber`/../..
if { Boolean "personal-backup" ;} && [ "$anysettings" ]
then
   ListProgramFiles --path --null ${package} ${versionnumber} | tar cvpf "$targetdir/$packagefile" --null --no-recursion --files-from - 1>&2
   [ "$tree_symlinked" = "yes" ] && Quiet popd
   
   # would make sense as personal-backup.  CJC
   Boolean "personal-backup" && [ "$anysettings" ] && tar rhvpf "$targetdir/$packagefile" "$package/Settings" 1>&2
   Boolean "gzip" && gzip -f "$targetdir/$packagefile" || bzip2 -f "$targetdir/$packagefile"
else
   Boolean "gzip" && option="z" || option="j"
   Boolean "gzip" && extension="gz" || extension="bz2"
   ListProgramFiles --path --null ${package} ${versionnumber} | tar cvpf$option "$targetdir/$packagefile".$extension --null --no-recursion --files-from - 1>&2
   [ "$tree_symlinked" = "yes" ] && Quiet popd
fi

size=`ls -l "$targetdir/$packagefile".* | awk '{ print $5 }'`
Log_Verbose "Packaged $package, version $versionnumber - $size bytes."

echo "$targetdir/$packagefile.$extension"
