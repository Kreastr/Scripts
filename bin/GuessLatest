#!/usr/bin/env python3

# (C) 2004 Andre Detsch. Released under the GNU GPL.

# GuessLatest
# Try to guess the most recent package version based on the version number

import sys
import types
import functools
import itertools
from PythonUtils import *
from operator import itemgetter

def multitype_cmp(a, b):
    try:
        return (a > b) - (a < b)
    except TypeError:
        sys.stderr.write(f"Failed to compare {a} with {b}")
        raise

def multitype_comparison(a, b):
    try:
        return multitype_cmp(a, b)
    except TypeError:
        if len(a) != len(b):
            # Unexpected. Assume a < b
            return -1
        new_a, new_b = [], []
        for i in range(len(a)):
            # Check which of the tuple elements is failing the comparison
            try:
                res = a[i] < b[i]
                new_a.append(a[i])
                new_b.append(b[i])
            except TypeError:
                # Elements found. This is where we try to fix things.
                if type(a[i]) == list and type(b[i]) == list:
                    new_ai = list(a[i])
                    new_bi = list(b[i])
                    length = len(new_ai) if len(new_ai) < len(new_bi) else len(new_bi)
                    for j in range(length):
                        if type(new_ai[j]) == type(new_bi[j]):
                            pass
                        elif type(new_ai[j]) == str:
                            new_ai.insert(j, 0)
                        elif type(new_bi[j]) == str:
                            new_bi.insert(j, 0)
                    new_a.append(new_ai)
                    new_b.append(new_bi)
                else:
                    # Convert both elements to str
                    new_a.append(str(ai))
                    new_b.append(str(bi))
        return multitype_cmp(new_a, new_b)

def GuessLatest(versions, stableOnly=0, returnList=0) :
	if not versions:
		if returnList:
			return []
		else:
			return ""

	def extractVersion(s):
		if type(parameter) == tuple:
			l = parameter[0].split("/")
		else:
			l = parameter.split("/")
		l = l[-1].split('--')
		if len(l) > 1:
			return l[1]
		else:
			return l[0]

	def breakInSwitches(s):
		#breaks string when it switches from number to character 2a = [2,a], 3rc1 = [3,rc,1], and so on
		from string import digits
		toReturn = []
		w = ""
		for c in s:
			if w and ((w[-1] in digits and not c in digits) or (c in digits and not w[-1] in digits)) and not (c == '.' or w[-1] == '.'):
				toReturn.append(w)
				w = c
			else:
				w += c
		toReturn.append(w)
		return toReturn

	def versionWeight(version):
		unstable_dict = { 'rc':0.0001, 'pre':0.001, 'pr':0.001, 'beta':0.01, 'alpha':0.1 }
		minors = []

		# empty strings and "Current" should be ignored
		if version == "" or version == "Current":
			return [],  0

		# if the version is cvs/svn, must be the last choice.
		if version.lower().endswith('-git'):
			version = 'git'
		if version.lower() in ('svn', 'cvs', 'git', 'bzr', 'hg'):
			minors.append(-1)

		unstable = 0
		for k in breakInSwitches(version):
			internalminors = []
			for i in k.lower().split("."):
				# remove '-' from, e.g., '1.0-rc2'
				if len(i) > 0 and i[0] == '-':
					i = i[1:]
				try:
					internalminors.append(int(i))
				except:
					if i in list(unstable_dict.keys()) and minors:
						unstable = 1
						minors[-1][-1] -= unstable_dict[i]
					else:
						internalminors.append(i)
			if internalminors:
				minors += internalminors
		return minors, unstable

	def splitVersionAndRevision(version_with_revision):
		r = version_with_revision.split('-')[-1]
		import re
		rev_format = 'r([0-9]+)(p([0-9]+))?\Z'
		rev_format_c = re.compile(rev_format)
		m = rev_format_c.match(r)
		if m:
			if m.group(3):
				return version_with_revision[:-len(r)-1], [int(m.group(1)), int(m.group(3))]
			else:
				return version_with_revision[:-len(r)-1], [int(m.group(1)), 0]
		else:
			return version_with_revision, [0, 0]

	built_versions = []
	built_versions_stable = []

	param_order=0
	for parameter in versions:
		version_with_revision = extractVersion(parameter)
		version,revision = splitVersionAndRevision(version_with_revision)
		weight,unstable = versionWeight(version)
		if not unstable:
			built_versions_stable.append((weight,revision,param_order,parameter))
		built_versions.append((weight,revision,param_order,parameter))
		param_order -= 1

	built_versions_stable.sort(key=functools.cmp_to_key(multitype_comparison))
	built_versions.sort(key=functools.cmp_to_key(multitype_comparison))

	bv  = [ i[-1] for i in built_versions        ]
	sbv = [ i[-1] for i in built_versions_stable ]

	if returnList:
		if stableOnly and sbv:
			return sbv
		else:
			return bv
	else:
		if stableOnly and sbv:
			return sbv[-1]
		else:
			return bv[-1]


if __name__ == '__main__':
	try:
		from optparse import OptionParser

		parser = OptionParser("usage: %prog [-s] <version1> [version2] ...\n \
		Accepts package names, recipe names or version numbers as parameter ")

		parser.add_option("-s", "--stable", action="store_true", dest='stable',
		                  default=False,  help="try to return a stable version as result")

		parser.add_option("-l", "--list", action="store_true", dest='return_list',
		                  default=False,  help="returns a sorted list of versions")

		(options, args) = parser.parse_args()
		just_stable = options.stable
		return_list = options.return_list
	except:
		just_stable = 0
		args = sys.argv[1:]
		sys.exit(1)

	if len(args) < 1:
		Log_Error("Please pass at least one version number","GuessLatest")
		sys.exit(1)

	r =  GuessLatest(args, just_stable, options.return_list)
	if options.return_list:
		r.reverse()
		for i in r:
			print(i)
	else:
		print(r)

