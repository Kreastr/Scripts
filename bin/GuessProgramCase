#!/bin/bash

# (C) 2004-2006 Andre Detsch. Released under the GNU GPL.
# GuessProgramCase


##################################################
# Imports
##################################################

. ScriptFunctions
Import OptionParser

##################################################
# Options and configuration
##################################################

helpOnNoArguments=yes
scriptDescription="Try to guess the case of a program based on the installed packages."
scriptCredits="(C)2003-2007 by Andre Detsch et al. Released under the GNU GPL."
scriptUsage="<program> [<version>]"
scriptNotes="If no version is specified, Current is assumed. "

Parse_Options "$@"

if [ $# -lt 1 -o "$1" = "--help" -o  "$1" = "-h" ]
then
   echo "Usage: `basename $0` program_name [version]"
   exit 1
fi

program="$(Arg 1)"
version="$(Arg 2)"

look_in() {
   dir="$1"

   if [ -e "$dir/$program/$version" ]
   then
      # Case 1: we have a perfect match (version can be "")
      echo $program
   else 
      pushd $dir &> /dev/null
      ds=`find . -maxdepth 1 -iname "$program" 2> /dev/null | cut -b3-`
      popd &> /dev/null
      
      if [ `echo $ds | wc -w` = "1" ]
      then
         # Case 2: there is only one matching program installed
         echo $ds
      elif [ `echo $ds | wc -w` = "0" ]
      then
         # Case 3: there is no matching program installed (should GetAvailable be called?)
         return 1
      elif [ ! "$version" ]
      then
         tokens=($ds) # WTF?
         # Case 4: there is more than one matching program, and we DON'T care about version
         echo ${tokens[0]}
      else    
         found=
         for d in $ds
         do
            if [ -e "$dir/$d/$version" ] 
            then
               # Case 5: We found a matching program + desired version
               echo $d
               found=1
               break
            fi
         done
         if [ ! "$found" ]
         then
            tokens=($ds) 
            # Case 5: We did not found a matching version, so we return any matching 
            #         program (should GuessLatest be called?)
            echo ${tokens[0]}
         fi
      fi
   fi
   return 0
}

# First try, look in installed programs.
look_in "$goboPrograms" && exit 0

# Second try, look in recipes.
# Running this at the top of the script makes it noticeably slower,
# even on a modern (as of 2007) machine! It's probably time
# to break the GoboLinux module into smaller pieces.
Import GoboLinux
Parse_Conf Compile/Compile.conf
look_in "${compileRecipesDir}" && exit 0

# Give up, return unchanged.
echo "$program"
