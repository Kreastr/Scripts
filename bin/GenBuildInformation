#!/bin/bash

source ScriptFunctions
Import File
Import GoboLinux
Import Log
Import OptionParser
Import String
Import Array

### Options ###################################################################

scriptDescription="Generates the list of packages from the current environment used by a GoboLinux package."
scriptCredits="Released under the GNU GPL."
helpOnNoArguments=yes
scriptUsage="<package> [<version>]"
scriptNotes="If no version is specified, Current is assumed. "
Add_Option_Boolean "s" "store" "Store the information in Resources/BuildInformation. Default is standard output."
Add_Option_Boolean "a" "all" "Search all files, not just standard directories."

Parse_Options "$@"

### Utility functions #################################################################

function extract_dependencies_from_file() {
objectsneeded=$(objdump -p "$1" 2> /dev/null | grep "NEEDED" | awk '{ print $2 }')
for obj in ${objectsneeded}
do
   if realfile=$(readlink -f ${goboLibraries}/${obj}) && [ -f "${realfile}" ]
   then
      echo ${realfile}
   elif [ -n "$LD_LIBRARY_PATH" ] && realfile=$(readlink -f ${LD_LIBRARY_PATH}/${obj}) && [ -f "${realfile}" ]
   then
      echo ${realfile}
   elif realfile=$(ldd "$1" | grep "${obj}" | awk '{ print $3 }') && [ -f "${realfile}" ]
   then
      echo ${realfile}
   elif realfile=($(find "${prefix}" -name "${obj}" | xargs -i readlink -f {} )) && [ -f "${realfile}" ]
   then
      continue
   elif realfile=($(find ${goboLibraries} -name "${obj}" | xargs -i readlink -f {} )) && [ -f "${realfile}" ]
   then
      echo ${realfile}
   else
      echo "# *Warning*: Unresolved library ${obj}"
   fi
done
}

function path2programs() {
   # sed: First replace all spaces with newlines as sed operates on one line at the time
   # second: if we match '#', place the (n)ext 4 lines in the (H)old buffer then e(x)change
   # the hold buffer with the pattern space and replace the new lines with spaces and (p)rint it
   # The third and fourth line just takes a path and returns the app name and version.
   sed 's, ,\n,g' | sed -r -n -e '/^#/{n;h;n;H;n;H;n;H;x;s/\n/ /gp}
                                  s,^/.*/(.*)/(.*)/lib.*/.*,\1 \2,gp
                                  s,^/.*/(.*)/(.*)/s?bin.*/.*,\1 \2,gp'
}

package=$(GuessProgramCase $(Arg 1) $(Arg 2))
[ "$(Arg 2)" ] && version="$(Arg 2)" || version="Current"
version=$(Get_Version "$package" "$version")
Is_Directory "$goboPrograms/$package" || Die "Package $package does not exist."
Is_Empty "$version" && Die "Couldn't find a proper version for $package."
prefix=$(readlink -f $goboPrograms/$package/$version)
Is_Directory "$prefix" || Die "$package version $version is not a valid package."
dependenciesfile=$(Dependencies_File "$package" "$version")

if Boolean "store"
then
   store="$prefix/Resources/BuildInformation"
   Is_Writable "${store}" || Die "Needs write access to ${store}"
   mkdir -p "$prefix/Resources/"
   exec >$store
fi

### default: Generate a dependency report ###############################################

if [ "$prefix" ]
then
report=$({
   Progress_Start "Generating dependency report. Please wait: "
   while read i
   do
      if [ -x "$i" -a ! -L "$i" -a ! -d "$i" ]
      then
         extract_dependencies_from_file "$i"
      fi
      Progress_Move
   done < <(if Boolean "all"
            then
               find "$prefix" 2>/dev/null
            else
               find "$prefix" -path "$prefix/sbin/*" -or \
                              -path "$prefix/bin/*"  -or \
                              -path "$prefix/lib/*"  -or \
                              -path "$prefix/libexec/*" 2>/dev/null
            fi)
   Progress_End
})
deplist=$(echo ${report} | path2programs | sort | uniq | grep -v "^$package ")
[ "$deplist" ] && echo "$deplist" || true
fi
